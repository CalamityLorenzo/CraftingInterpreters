program         -> declaration* EOF;
declaration     -> funcDecl | varDecl | statement;
funcDecl        -> "fun" function;
function        -> IDENTIFIER "(" parameters? ")" block;
parameters      -> IDENTIFIER ( "," IDENTIFIER )*;
varDecl         -> "var" IDENTIFIER ("=" expression)? ";" ;
statement       -> exprStmt 
                | forStmt
                | ifStmt
                | printStmt
                | returnStmt
                | whileStmt
                | block;                
exprStmt        -> expression ";" ;
forStmt         -> "for" "(" (varDecl| exprStmt | ";") 
                   expression? ";" 
                   expression? ")" statement;       
ifStmt          -> "if" "(" expression ")" statement
                   ( "else" statement)? ;
whileStmt       -> "while" "(" expression ")" statement ;

block           -> "{"  declaration* "}";
printStmt       -> "print" expression ";" ;
expression      -> assignment;
assignment      -> IDENTIFIER "=" assignment | logic_or;
logic_or        -> logic_and ( "or"  logic_and)*;
logic_and       -> equality ( "and" equality )*;
equality        -> comparison (("!=" | "==") comparison )*;
comparison      -> term (("<" | ">" | "<=" | ">=") term)*; 
term            -> factor (("+" | "-") factor)*;
factor          -> unary (("*" | "\") unary)*;
unary           -> ("-" | "!" ) unary | call;
call            -> primary ( "(" arguments? ")" )*;   // * allows series of calls MyFunc(1)(2)() etc.
arguments       -> expression ("," expression )*;       // Arguments is handled as if was an object {arg:one, arg2:two}
primary         -> NUMBER 
                | STRING 
                | "true" 
                | "false" 
                | "nil" 
                | "(" expression ")"
                | IDENTIFIER; 
